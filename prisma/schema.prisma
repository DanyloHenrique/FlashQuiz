// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  create_at    DateTime       @default(now())
  name         String
  email        String         @unique
  password     String
  quiz         Quiz[]
  studySession StudySession[]
}

model Quiz {
  id            String         @id @default(uuid())
  userId        String
  User          User           @relation(fields: [userId], references: [id])
  title         String
  description   String?
  visibility    Visibility     @default(public)
  flashcardList Flashcard[]
  create_at     DateTime       @default(now())
  studySession  StudySession[]
}

model Flashcard {
  id             String   @id @default(uuid())
  Quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  term           String
  description    String
  create_at      DateTime @default(now())
  studySessionId String?

  StudySessionFlashcardViewLater ViewLaterFlashcard[]
  StudySessionFlashcard          StudySessionFlashcard[]
}

model StudySession {
  id                     String                  @id @default(uuid())
  userId                 String
  quizId                 String
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz                   Quiz                    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  status                 Status                  @default(progress)
  totalTimeInMinutes     Int?
  startTime              DateTime                @default(now())
  endTime                DateTime?
  StudySessionFlashcard  StudySessionFlashcard[]
  flashcardViewLaterList ViewLaterFlashcard[]
}

model StudySessionFlashcard {
  studySessionId String
  flashcardId    String
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@id([studySessionId, flashcardId]) // Chave composta
}

model ViewLaterFlashcard {
  studySessionId String
  flashcardId    String 
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@id([studySessionId, flashcardId]) // Chave composta
}

enum Visibility {
  public
  private
}

enum Status {
  progress
  completed
  paused
}
